import random
import time

# Función para imprimir texto con retraso
def imprimir_con_retraso(texto, retraso=0.07):
    for letra in texto:
        print(letra, end='', flush=True)
        time.sleep(retraso)
    print()

class Personaje:
    def __init__(self, nombre, clase, nivel=1):
        self.nombre = nombre
        self.clase = clase
        self.nivel = nivel
        self.hp = 100  # Health Points
        self.mp = 20   # Mana Points
        self.str = 0   # Strength
        self.int = 0   # Intelligence
        self.res = 0   # Resistance
        self.vit = 0   # Vitality
        self.def_ = 5  # Defense
        self.atk = 30  # Attack
        self.exp = 0   # Experience
        self.habilidades = []
        self.armas = []
        self.magia = []
        self.inventario = []

    def esta_vivo(self):
        return self.hp > 0

    def atacar(self, enemigo):
        dano = self.atk - enemigo.def_
        dano = max(dano, 0)
        enemigo.hp -= dano
        imprimir_con_retraso(f"{self.nombre} ataca a {enemigo.nombre} y causa {dano} de daño.", 0.07)

    def recibir_dano(self, dano):
        self.hp -= dano
        if self.hp < 0:
            self.hp = 0
        imprimir_con_retraso(f"{self.nombre} recibe {dano} de daño. Vida restante: {self.hp}", 0.07)

    def subir_nivel(self):
        self.nivel += 1
        self.hp += 10
        self.mp += 5
        self.atk += 2
        self.def_ += 1
        imprimir_con_retraso(f"{self.nombre} ha subido al nivel {self.nivel}!", 0.07)

    def ganar_experiencia(self, exp):
        self.exp += exp
        while self.exp >= self.nivel * 100:  # Necesita 100 exp por nivel
            self.exp -= self.nivel * 100
            self.subir_nivel()

    def agregar_al_inventario(self, item):
        if len(self.inventario) < 10:
            self.inventario.append(item)
            imprimir_con_retraso(f"Has recibido un {item} y lo has añadido a tu inventario.", 0.07)
        else:
            imprimir_con_retraso("Tu inventario está lleno. No puedes añadir más objetos.", 0.07)

    def revisar_inventario(self):
        if not self.inventario:
            imprimir_con_retraso("Tu inventario está vacío.", 0.07)
            return False
        else:
            imprimir_con_retraso("Tu inventario contiene:", 0.07)
            for item in self.inventario:
                imprimir_con_retraso(f"- {item}", 0.07)
            return True

    def equipar_arma(self, item):
        if item in self.inventario:
            if item == "Pergamino de Fuego":
                self.magia.append("Hechizo de Fuego")
                imprimir_con_retraso(f"{self.nombre} ha equipado el {item}. Ahora puede usar magia de fuego.", 0.07)
            elif item == "Arco de dos manos":
                self.armas.append("Arco de dos manos")
                imprimir_con_retraso(f"{self.nombre} ha equipado el {item}.", 0.07)
            elif item == "Espada de dos manos":
                self.armas.append("Espada de dos manos")
                imprimir_con_retraso(f"{self.nombre} ha equipado el {item}.", 0.07)
            self.inventario.remove(item)
        else:
            imprimir_con_retraso(f"No tienes un {item} en tu inventario.", 0.07)

def seleccionar_clase():
    clases = {
        "1": "Mago",
        "2": "Arquero",
        "3": "Guerrero"
    }
    imprimir_con_retraso("Selecciona una clase:\n1. Mago: Usa magia y consume mana.\n2. Arquero: Usa arcos y dagas.\n3. Guerrero: Usa espadas y escudos.", 0.07)
    eleccion = input("Introduce el número de tu elección: ").strip()
    if eleccion in clases:
        clase = clases[eleccion]
        imprimir_con_retraso(f"Has seleccionado la clase: {clase}.", 0.07)
        return clase
    else:
        imprimir_con_retraso("Selección no válida. Por favor, selecciona un número del 1 al 3.", 0.07)
        return seleccionar_clase()  # Vuelve a solicitar la clase

def crear_monstruos():
    return [
        Monstruo("Goblin", 30, 5, 10, 50),
        Monstruo("Orco", 50, 10, 15, 80),
        Monstruo("Troll", 70, 15, 20, 100),
        Monstruo("Dragón", 100, 20, 30, 150),
        Monstruo("Espectro", 40, 8, 12, 60),
        Monstruo("Duende", 35, 6, 8, 55),
        Monstruo("Golem", 80, 12, 25, 120),
        Monstruo("Vampiro", 60, 18, 20, 90),
        Monstruo("Lobo", 45, 7, 14, 65),
        Monstruo("Bandido", 55, 10, 18, 75),
        Monstruo("Sombra", 50, 14, 22, 85),
        Monstruo("Ciclope", 65, 20, 25, 95),
        Monstruo("Manticora", 75, 16, 28, 110),
        Monstruo("Hydra", 90, 25, 30, 140),
        Monstruo("Grifo", 55, 12, 20, 70),
        Monstruo("Quimera", 85, 22, 26, 130),
        Monstruo("Fénix", 70, 20, 24, 105),
        Monstruo("Krakens", 95, 25, 28, 150),
        Monstruo("Gárgola", 60, 18, 22, 80),
        Monstruo("Sirena", 50, 15, 18, 75)
    ]

class Monstruo:
    def __init__(self, nombre, hp, def_, atk, exp):
        self.nombre = nombre
        self.hp = hp
        self.def_ = def_
        self.atk = atk
        self.exp = exp

    def atacar(self, personaje):
        dano = self.atk - personaje.def_
        dano = max(dano, 0)
        personaje.recibir_dano(dano)
        imprimir_con_retraso(f"{self.nombre} ataca a {personaje.nombre} y causa {dano} de daño.", 0.07)

def ajustar_estadisticas_monstruo(monstruo, nivel_jugador):
    factor = 1 + 0.02 * (nivel_jugador - 1)
    factor = min(factor, 1.05)  # Limitar el incremento de dificultad al 5%
    monstruo.hp = int(monstruo.hp * factor)
    monstruo.def_ = int(monstruo.def_ * factor)
    monstruo.atk = int(monstruo.atk * factor)

def seleccionar_monstruo(monstruos, nivel_jugador):
    monstruos_validos = [m for m in monstruos if m.hp <= nivel_jugador * 100]  # Ajusta el límite si es necesario
    monstruo = random.choice(monstruos_validos)
    ajustar_estadisticas_monstruo(monstruo, nivel_jugador)
    return monstruo

def combate_turno(personaje, monstruo):
    if personaje.clase == "Mago":
        imprimir_con_retraso(f"\n{personaje.nombre}, es tu turno. ¿Qué deseas hacer?\n1. Usar magia\n2. Huir", 0.07)
        eleccion = input().strip()
        if eleccion == "1":
            if personaje.magia:
                imprimir_con_retraso("Selecciona un hechizo:", 0.07)
                for i, hechizo in enumerate(personaje.magia):
                    imprimir_con_retraso(f"{i + 1}. {hechizo}", 0.07)
                seleccion = int(input()) - 1
                if 0 <= seleccion < len(personaje.magia):
                    hechizo = personaje.magia[seleccion]
                    imprimir_con_retraso(f"{personaje.nombre} usa {hechizo}!", 0.07)
                    # Aquí puedes implementar efectos de la magia
                else:
                    imprimir_con_retraso("Selección no válida.")
            else:
                imprimir_con_retraso("No tienes magia para usar.")
        elif eleccion == "2":
            imprimir_con_retraso(f"{personaje.nombre} huye de la batalla.", 0.07)
            return False
        else:
            imprimir_con_retraso("Selección no válida.")
            return combate_turno(personaje, monstruo)
    else:
        imprimir_con_retraso(f"\n{personaje.nombre}, es tu turno. ¿Qué deseas hacer?\n1. Atacar\n2. Huir", 0.07)
        eleccion = input().strip()
        if eleccion == "1":
            personaje.atacar(monstruo)
            if monstruo.hp > 0:
                monstruo.atacar(personaje)
            return personaje.esta_vivo()
        elif eleccion == "2":
            imprimir_con_retraso(f"{personaje.nombre} huye de la batalla.", 0.07)
            return False
        else:
            imprimir_con_retraso("Selección no válida.")
            return combate_turno(personaje, monstruo)

def iniciar_juego():
    imprimir_con_retraso("Bienvenido al reino de la aventura. Aquí lucharás contra monstruos, mejorarás tus habilidades y crecerás en poder.", 0.07)
    
    nombre_personaje = input("Introduce el nombre de tu personaje: ").strip()
    clase_personaje = seleccionar_clase()
    
    personaje = Personaje(nombre_personaje, clase_personaje)
    
    if clase_personaje == "Mago":
        personaje.agregar_al_inventario("Pergamino de Fuego")
    elif clase_personaje == "Arquero":
        personaje.agregar_al_inventario("Arco de dos manos")
    elif clase_personaje == "Guerrero":
        personaje.agregar_al_inventario("Espada de dos manos")

    imprimir_con_retraso("\nMiremos tu inventario...", 0.07)
    if personaje.revisar_inventario():
        item_inicial = personaje.inventario[0]
        imprimir_con_retraso(f"Tienes un {item_inicial}. ¿Deseas equiparlo? (sí/no): ", 0.07)
        equipar = input().strip().lower()
        if equipar in ["sí", "si"]:
            personaje.equipar_arma(item_inicial)
            imprimir_con_retraso(f"\n{personaje.nombre} dice: '¡Perfecto, ahora estamos listos para la batalla!'", 0.07)
        else:
            imprimir_con_retraso("Si no equipas este objeto, no podrás continuar ya que es necesario para tu aventura.")
            equipar = input(f"¿Deseas equipar el {item_inicial}? (sí/no): ").strip().lower()
            if equipar in ["sí", "si"]:
                personaje.equipar_arma(item_inicial)
                imprimir_con_retraso(f"\n{personaje.nombre} dice: '¡Perfecto, ahora estamos listos para la batalla!'", 0.07)
            else:
                imprimir_con_retraso("No has equipado el objeto. La aventura comienza ahora sin el equipo recomendado.", 0.07)
    
    monstruos = crear_monstruos()
    monstruo = seleccionar_monstruo(monstruos, personaje.nivel)
    
    imprimir_con_retraso(f"\n¡Un {monstruo.nombre} salvaje ha aparecido! Prepárate para la batalla.", 0.07)
    
    while personaje.esta_vivo() and monstruo.hp > 0:
        if not combate_turno(personaje, monstruo):
            break
    
    if personaje.esta_vivo():
        experiencia_ganada = monstruo.exp
        imprimir_con_retraso(f"\n¡{personaje.nombre} ha derrotado a {monstruo.nombre}!", 0.07)
        personaje.ganar_experiencia(experiencia_ganada)
    else:
        imprimir_con_retraso(f"\n{personaje.nombre} ha sido derrotado por {monstruo.nombre}.", 0.07)

# Ejecutar el juego
iniciar_juego()
