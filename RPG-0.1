import random
import time

def imprimir_con_retraso(texto, retraso=0.05):
    for caracter in texto:
        print(caracter, end='', flush=True)
        time.sleep(retraso)
    print()

class Personaje:
    def __init__(self, nombre, clase, nivel=1):
        self.nombre = nombre
        self.clase = clase
        self.nivel = nivel
        self.hp = 100  # Health Points
        self.mp = 20   # Mana Points
        self.str = 10  # Strength (influences attack)
        self.int = 10  # Intelligence (influences mana)
        self.res = 10  # Resilience (influences defense)
        self.vit = 10  # Vitality (influences health)
        self.def_ = 5  # Defense
        self.atk = 30  # Attack
        self.exp = 0   # Experience
        self.exp_to_next_level = 100  # Experience required to level up
        self.habilidades = []
        self.armas = []
        self.magia = []
        self.inventario = []
        self.capacidad_inventario = 10
        self.puntos_habilidad = 0  # Puntos de habilidad disponibles

    def __str__(self):
        return (f"Nombre: {self.nombre}\n"
                f"Clase: {self.clase}\n"
                f"Nivel: {self.nivel}\n"
                f"HP: {self.hp}\n"
                f"MP: {self.mp}\n"
                f"STR: {self.str}\n"
                f"INT: {self.int}\n"
                f"RES: {self.res}\n"
                f"VIT: {self.vit}\n"
                f"DEF: {self.def_}\n"
                f"ATK: {self.atk}\n"
                f"EXP: {self.exp}\n"
                f"EXP para siguiente nivel: {self.exp_to_next_level}\n"
                f"Puntos de Habilidad: {self.puntos_habilidad}\n"
                f"Habilidades: {', '.join(self.habilidades)}\n"
                f"Armas: {', '.join(self.armas)}\n"
                f"Magia: {', '.join(self.magia)}\n"
                f"Inventario: {', '.join(self.inventario)}\n")

    def atacar(self, enemigo):
        dano = self.atk - enemigo.def_
        if dano < 0:
            dano = 0
        enemigo.recibir_dano(dano)
        imprimir_con_retraso(f"{self.nombre} ataca a {enemigo.nombre} causando {dano} de daño!")

    def recibir_dano(self, dano):
        self.hp -= dano
        if self.hp < 0:
            self.hp = 0
        imprimir_con_retraso(f"{self.nombre} ha recibido {dano} de daño! HP restante: {self.hp}")

    def subir_nivel(self):
        self.nivel += 1
        self.hp = int(self.hp * 1.02)
        self.mp = int(self.mp * 1.02)
        self.def_ = int(self.def_ * 1.02)
        self.atk = int(self.atk * 1.02)
        self.exp_to_next_level += 50  # Incremento de experiencia para el próximo nivel
        self.puntos_habilidad += 1  # Ganar un punto de habilidad por nivel
        imprimir_con_retraso(f"{self.nombre} ha subido al nivel {self.nivel}!")
        imprimir_con_retraso(f"Has ganado un punto de habilidad!")

    def ganar_experiencia(self, cantidad):
        self.exp += cantidad
        imprimir_con_retraso(f"{self.nombre} ha ganado {cantidad} puntos de experiencia.")
        if self.exp >= self.exp_to_next_level:
            self.exp -= self.exp_to_next_level  # Restar la experiencia utilizada para subir de nivel
            self.subir_nivel()

    def aprender_habilidad(self, habilidad):
        if habilidad not in self.habilidades:
            self.habilidades.append(habilidad)
            imprimir_con_retraso(f"{self.nombre} ha aprendido {habilidad}!")

    def aumentar_estadistica(self, estadistica):
        if self.puntos_habilidad > 0:
            if estadistica == "STR":
                self.str += 1
            elif estadistica == "INT":
                self.int += 1
            elif estadistica == "RES":
                self.res += 1
            elif estadistica == "VIT":
                self.vit += 1
                self.hp += 10  # Incrementar HP cuando Vitality aumenta
            self.puntos_habilidad -= 1
            imprimir_con_retraso(f"{self.nombre} ha aumentado {estadistica}!")
        else:
            imprimir_con_retraso("No tienes puntos de habilidad disponibles.")

    def equipar_arma(self, arma):
        if len(self.armas) < 2:  # Limitar a 2 armas equipadas
            self.armas.append(arma)
            imprimir_con_retraso(f"{self.nombre} ha equipado {arma}!")
        else:
            imprimir_con_retraso("Ya tienes dos armas equipadas. Deséquipate de una primero.")

    def usar_arma(self, arma):
        if arma in self.armas:
            imprimir_con_retraso(f"{self.nombre} usa {arma} en el combate.")
        else:
            imprimir_con_retraso(f"{self.nombre} no tiene equipada el arma {arma}.")

    def agregar_al_inventario(self, item):
        if len(self.inventario) < self.capacidad_inventario:
            self.inventario.append(item)
            imprimir_con_retraso(f"{item} ha sido agregado al inventario.")
        else:
            imprimir_con_retraso("El inventario está lleno!")

    def esta_vivo(self):
        return self.hp > 0

    def revisar_inventario(self):
        if self.inventario:
            imprimir_con_retraso("Tienes los siguientes objetos en tu inventario:")
            for item in self.inventario:
                imprimir_con_retraso(f"- {item}")
            return True
        else:
            imprimir_con_retraso("Tu inventario está vacío.")
            return False

class Monstruo:
    def __init__(self, nombre, hp, mp, str, int_, res, vit, def_, atk, exp):
        self.nombre = nombre
        self.hp = hp
        self.mp = mp
        self.str = str
        self.int_ = int_
        self.res = res
        self.vit = vit
        self.def_ = def_
        self.atk = atk
        self.exp = exp

    def recibir_dano(self, dano):
        self.hp -= dano
        if self.hp < 0:
            self.hp = 0
        imprimir_con_retraso(f"{self.nombre} ha recibido {dano} de daño! HP restante: {self.hp}")

    def atacar(self, objetivo):
        dano = self.atk - objetivo.def_
        if dano < 0:
            dano = 0
        objetivo.recibir_dano(dano)
        imprimir_con_retraso(f"{self.nombre} ataca a {objetivo.nombre} causando {dano} de daño!")

def crear_monstruos():
    return [
        Monstruo("Goblin", 50, 0, 8, 5, 5, 5, 3, 12, 10),
        Monstruo("Orco", 100, 0, 15, 8, 10, 10, 7, 20, 20),
        Monstruo("Dragón", 200, 50, 25, 20, 15, 15, 10, 30, 50),
        # Agrega más monstruos aquí, hasta completar 20
    ]

def ajustar_estadisticas_monstruo(monstruo, nivel_jugador):
    if nivel_jugador > 1:
        factor = 1 + (nivel_jugador - 1) * 0.02  # Aumenta entre 2% y 5% por nivel de jugador
        monstruo.hp = int(monstruo.hp * factor)
        monstruo.mp = int(monstruo.mp * factor)
        monstruo.str = int(monstruo.str * factor)
        monstruo.int_ = int(monstruo.int_ * factor)
        monstruo.res = int(monstruo.res * factor)
        monstruo.vit = int(monstruo.vit * factor)
        monstruo.def_ = int(monstruo.def_ * factor)
        monstruo.atk = int(monstruo.atk * factor)

def seleccionar_monstruo(monstruos, nivel_jugador):
    monstruos_validos = [m for m in monstruos if m.hp <= nivel_jugador * 100]  # Ajusta el límite si es necesario
    monstruo = random.choice(monstruos_validos)
    ajustar_estadisticas_monstruo(monstruo, nivel_jugador)
    return monstruo

def combate_turno(personaje, monstruo):
    if personaje.clase == "Mago":
        imprimir_con_retraso(f"\n{personaje.nombre}, es tu turno. ¿Qué deseas hacer?\n1. Usar magia\n2. Huir", 0.07)
        eleccion = input().strip()
        if eleccion == "1":
            if personaje.magia:
                imprimir_con_retraso("Selecciona un hechizo:", 0.07)
                for i, hechizo in enumerate(personaje.magia):
                    imprimir_con_retraso(f"{i + 1}. {hechizo}", 0.07)
                seleccion = int(input()) - 1
                if 0 <= seleccion < len(personaje.magia):
                    hechizo = personaje.magia[seleccion]
                    imprimir_con_retraso(f"{personaje.nombre} usa {hechizo}!", 0.07)
                    # Aquí puedes implementar efectos de la magia
                else:
                    imprimir_con_retraso("Selección no válida.")
            else:
                imprimir_con_retraso("No tienes magia para usar.")
        elif eleccion == "2":
            imprimir_con_retraso(f"{personaje.nombre} ha huido del combate.", 0.07)
            return False
    else:
        imprimir_con_retraso(f"\n{personaje.nombre}, es tu turno. ¿Qué deseas hacer?\n1. Atacar\n2. Huir", 0.07)
        eleccion = input().strip()
        if eleccion == "1":
            personaje.atacar(monstruo)
        elif eleccion == "2":
            imprimir_con_retraso(f"{personaje.nombre} ha huido del combate.", 0.07)
            return False

    if monstruo.hp > 0:
        monstruo.atacar(personaje)
    
    return personaje.esta_vivo()

def iniciar_juego():
    imprimir_con_retraso("Bienvenido al reino de la aventura. Aquí lucharás contra monstruos, mejorarás tus habilidades y crecerás en poder.", 0.07)
    
    nombre_personaje = input("Introduce el nombre de tu personaje: ").strip()
    clase_personaje = seleccionar_clase()
    
    personaje = Personaje(nombre_personaje, clase_personaje)
    
    if clase_personaje == "Mago":
        personaje.agregar_al_inventario("Pergamino de Fuego")
    elif clase_personaje == "Arquero":
        personaje.agregar_al_inventario("Arco de dos manos")
    elif clase_personaje == "Guerrero":
        personaje.agregar_al_inventario("Espada de dos manos")

    imprimir_con_retraso("\nMiremos tu inventario...", 0.07)
    if personaje.revisar_inventario():
        item_inicial = personaje.inventario[0]
        imprimir_con_retraso(f"Tienes un {item_inicial}. ¿Deseas equiparlo? (sí/no): ", 0.07)
        equipar = input().strip().lower()
        if equipar in ["sí", "si"]:
            personaje.equipar_arma(item_inicial)
            imprimir_con_retraso(f"\n{personaje.nombre} dice: '¡Perfecto, ahora estamos listos para la batalla!'", 0.07)
        else:
            imprimir_con_retraso("Si no equipas este objeto, no podrás continuar ya que es necesario para tu aventura.")
            equipar = input(f"¿Deseas equipar el {item_inicial}? (sí/no): ").strip().lower()
            if equipar in ["sí", "si"]:
                personaje.equipar_arma(item_inicial)
                imprimir_con_retraso(f"\n{personaje.nombre} dice: '¡Perfecto, ahora estamos listos para la batalla!'", 0.07)
            else:
                imprimir_con_retraso("No has equipado el objeto. La aventura comienza ahora sin el equipo recomendado.", 0.07)
    
    monstruos = crear_monstruos()
    monstruo = seleccionar_monstruo(monstruos, personaje.nivel)
    
    imprimir_con_retraso(f"\n¡Un {monstruo.nombre} salvaje ha aparecido! Prepárate para la batalla.", 0.07)
    
    while personaje.esta_vivo() and monstruo.hp > 0:
        if not combate_turno(personaje, monstruo):
            break
    
    if personaje.esta_vivo():
        experiencia_ganada = monstruo.exp
        imprimir_con_retraso(f"\n¡{personaje.nombre} ha derrotado a {monstruo.nombre}!", 0.07)
        personaje.ganar_experiencia(experiencia_ganada)
    else:
        imprimir_con_retraso(f"\n{personaje.nombre} ha sido derrotado por {monstruo.nombre}.", 0.07)

# Ejecutar el juego
iniciar_juego()
